var searchIndex={};
searchIndex["actix"] = {"doc":"Actix is a rust actors framework","i":[[3,"Arbiter","actix","Arbiters provide an asynchronous execution environment for…",null,null],[3,"System","","System is a runtime manager.",null,null],[3,"SystemRunner","","Helper object that runs System's event loop",null,null],[3,"SpawnHandle","","A handle to a spawned future.",null,null],[3,"Addr","","The address of an actor.",null,null],[3,"Recipient","","The `Recipient` type allows to send one specific message…",null,null],[3,"WeakAddr","","A weakly referenced counterpart to `Addr<A>`.",null,null],[3,"Context","","An actor execution context.",null,null],[3,"ActorResponse","","A helper type for representing different types of message…",null,null],[3,"MessageResult","","A helper type that implements the `MessageResponse` trait.",null,null],[12,"0","","",0,null],[3,"Response","","Helper type for representing different type of message…",null,null],[3,"Supervisor","","Actor supervisor",null,null],[4,"ActorState","","Actor execution state",null,null],[13,"Started","","Actor is started.",1,null],[13,"Running","","Actor is running.",1,null],[13,"Stopping","","Actor is stopping.",1,null],[13,"Stopped","","Actor is stopped.",1,null],[4,"Running","","",null,null],[13,"Stop","","",2,null],[13,"Continue","","",2,null],[4,"MailboxError","","The errors that can occur during the message delivery…",null,null],[13,"Closed","","",3,null],[13,"Timeout","","",3,null],[5,"run","","Starts the system and executes the supplied future.",null,[[["r"]],["result"]]],[5,"spawn","","Spawns a future on the current arbiter.",null,[[["f"]]]],[11,"alive","","Indicates whether the actor is alive.",1,[[],["bool"]]],[11,"stopping","","Indicates whether the actor is stopped or stopping.",1,[[],["bool"]]],[11,"next","","Gets the next handle.",4,[[],["spawnhandle"]]],[11,"with_receiver","","",5,[[["addressreceiver"]],["self"]]],[11,"run","","",5,[[["a"]],["addr"]]],[11,"into_future","","",5,[[["a"]],["contextfut"]]],[11,"handle","","Returns a handle to the running future.",5,[[["self"]],["spawnhandle"]]],[11,"set_mailbox_capacity","","Sets the mailbox capacity.",5,[[["self"],["usize"]]]],[11,"connected","","Returns whether any addresses are still connected.",5,[[["self"]],["bool"]]],[11,"fut","","Creates an asynchronous response.",6,[[["t"]],["self"]]],[11,"reply","","Creates a response.",6,[[["result"]],["self"]]],[11,"reply","","Creates a response.",7,[[["result"]],["self"]]],[11,"async","","Creates an asynchronous response.",7,[[["t"]],["self"]]],[11,"start","","Start new supervised actor in current tokio runtime.",8,[[["f"]],["addr"]]],[11,"start_in_arbiter","","Start new supervised actor in arbiter's thread.",8,[[["arbiter"],["f"]],["addr"]]],[11,"new","","",9,[[["addresssender"]],["addr"]]],[11,"connected","","Returns whether the actor is still alive.",9,[[["self"]],["bool"]]],[11,"do_send","","Sends a message unconditionally, ignoring any potential…",9,[[["m"],["self"]]]],[11,"try_send","","Tries to send a message.",9,[[["m"],["self"]],[["senderror"],["result",["senderror"]]]]],[11,"send","","Sends an asynchronous message and waits for a response.",9,[[["m"],["self"]],["request"]]],[11,"recipient","","Returns the `Recipient` for a specific message type.",9,[[],["recipient"]]],[11,"downgrade","","Returns a downgraded `WeakAddr`.",9,[[["self"]],["weakaddr"]]],[11,"upgrade","","Attempts to upgrade the `WeakAddr<A>` pointer to an…",10,[[["self"]],[["option",["addr"]],["addr"]]]],[11,"do_send","","Sends a message.",11,[[["m"],["self"]],[["senderror"],["result",["senderror"]]]]],[11,"try_send","","Attempts to send a message.",11,[[["m"],["self"]],[["senderror"],["result",["senderror"]]]]],[11,"send","","Sends a message and asynchronously wait for a response.",11,[[["m"],["self"]],["recipientrequest"]]],[11,"connected","","",11,[[["self"]],["bool"]]],[0,"actors","","Helper actors",null,null],[0,"mocker","actix::actors","Mocking utility actor.",null,null],[3,"Mocker","actix::actors::mocker","This actor is able to wrap another actor and accept all…",null,null],[11,"mock","","",12,[[["box",["fnmut"]],["fnmut"]],["mocker"]]],[0,"resolver","actix::actors","DNS resolver and connector utility actor",null,null],[3,"Resolve","actix::actors::resolver","",null,null],[12,"name","","",13,null],[12,"port","","",13,null],[3,"Connect","","",null,null],[12,"name","","",14,null],[12,"port","","",14,null],[12,"timeout","","",14,null],[3,"ConnectAddr","","",null,null],[12,"0","","",15,null],[3,"Resolver","","",null,null],[3,"TcpConnector","","A TCP stream connector.",null,null],[4,"ResolverError","","",null,null],[13,"Resolver","","Failed to resolve the hostname",16,null],[13,"InvalidInput","","Address is invalid",16,null],[13,"Timeout","","Connecting took too long",16,null],[13,"IoError","","Connection io error",16,null],[6,"Connector","","",null,null],[6,"ConnectorError","","",null,null],[11,"host","","",13,[[["str"],["asref",["str"]]],["resolve"]]],[11,"host_and_port","","",13,[[["str"],["u16"],["asref",["str"]]],["resolve"]]],[11,"host","","",14,[[["str"],["asref",["str"]]],["connect"]]],[11,"host_and_port","","",14,[[["str"],["u16"],["asref",["str"]]],["connect"]]],[11,"timeout","","Set connect timeout",14,[[["duration"]],["connect"]]],[11,"new","","",17,[[["resolverconfig"],["resolveropts"]],["resolver"]]],[11,"new","","",18,[[["socketaddr"],["vecdeque",["socketaddr"]]],["tcpconnector"]]],[11,"with_timeout","","",18,[[["socketaddr"],["duration"],["vecdeque",["socketaddr"]]],["tcpconnector"]]],[0,"clock","actix","A configurable source of time.",null,null],[5,"delay_for","actix::clock","Wait until `duration` has elapsed.",null,[[["duration"]],["delay"]]],[5,"delay_until","","Wait until `deadline` is reached.",null,[[["instant"]],["delay"]]],[5,"interval_at","","Creates new `Interval` that yields with interval of…",null,[[["instant"],["duration"]],["interval"]]],[3,"Delay","","Future returned by `delay_until` and `delay_for`.",null,null],[3,"Duration","","A `Duration` type to represent a span of time, typically…",null,null],[3,"Instant","","A measurement of the system clock, useful for talking to…",null,null],[3,"Interval","","Stream returned by `interval` and `interval_at`.",null,null],[0,"fut","actix","Custom `Future` implementation with `Actix` support",null,null],[3,"Finish","actix::fut","A combinator used to convert a stream into a future; the…",null,null],[3,"Map","","Future for the `map` combinator, changing the type of a…",null,null],[3,"Ready","","Future for the `ready` function.",null,null],[3,"FutureResult","","A future representing a value that is immediately ready.",null,null],[3,"StreamFinish","","A combinator used to convert stream into a future, future…",null,null],[3,"StreamFold","","A future used to collect all the results of a stream into…",null,null],[3,"StreamMap","","A stream combinator which will change the type of a stream…",null,null],[3,"StreamThen","","A stream combinator which chains a computation onto each…",null,null],[3,"StreamTimeout","","Future for the `timeout` combinator, interrupts…",null,null],[3,"Then","","Future for the `then` combinator, chaining computations on…",null,null],[3,"Timeout","","Future for the `timeout` combinator, interrupts…",null,null],[3,"FutureWrap","","",null,null],[3,"StreamWrap","","",null,null],[4,"Either","","Combines two different futures yielding the same item and…",null,null],[13,"Left","","First branch of the type",19,null],[13,"Right","","Second branch of the type",19,null],[5,"ready","","Create a future that is immediately ready with a value.",null,[[["t"]],["ready"]]],[5,"err","","Creates a \"leaf future\" from an immediate value of a…",null,[[["e"]],["futureresult"]]],[5,"ok","","Creates a \"leaf future\" from an immediate value of a…",null,[[["t"]],["futureresult"]]],[5,"result","","Creates a new \"leaf future\" which will resolve with the…",null,[[["result"]],["futureresult"]]],[5,"wrap_future","","Converts normal future into `ActorFuture`, allowing its…",null,[[["f"]],["futurewrap"]]],[5,"wrap_stream","","Converts normal stream into `ActorStream`",null,[[["s"]],["streamwrap"]]],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",19,[[]]],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",19,[[]]],[11,"into_inner","","Extract the value of an either over two equivalent types.",19,[[],["t"]]],[11,"new","","",20,[[["s"]],["finish"]]],[8,"ActorFuture","","Trait for types which are a placeholder of a value that…",null,null],[16,"Output","","The type of value that this future will resolved with if…",21,null],[16,"Actor","","The actor within which this future runs",21,null],[10,"poll","","",21,[[["context"],["self"],["pin"]],["poll"]]],[11,"map","","Map this future's result to a different type, returning a…",21,[[["f"]],["map"]]],[11,"then","","Chain on a computation for when a future finished, passing…",21,[[["f"]],["then"]]],[11,"timeout","","Add timeout to futures chain.",21,[[["duration"]],["timeout"]]],[8,"ActorStream","","A stream of values, not all of which may have been…",null,null],[16,"Item","","The type of item this stream will yield on success.",22,null],[16,"Actor","","The actor within which this stream runs.",22,null],[10,"poll_next","","",22,[[["context"],["self"],["pin"]],[["option"],["poll",["option"]]]]],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",22,[[["f"]],["streammap"]]],[11,"then","","Chain on a computation for when a value is ready, passing…",22,[[["f"]],["streamthen"]]],[11,"fold","","Execute an accumulating computation over a stream,…",22,[[["t"],["f"]],["streamfold"]]],[11,"timeout","","Add timeout to stream.",22,[[["duration"]],["streamtimeout"]]],[11,"finish","","Converts a stream to a future that resolves when stream…",22,[[],["streamfinish"]]],[8,"IntoActorFuture","","Class of types which can be converted into an actor future.",null,null],[16,"Future","","The future that this type can be converted into.",23,null],[16,"Output","","The item that the future may resolve with.",23,null],[16,"Actor","","The actor within which this future runs",23,null],[10,"into_future","","Consumes this object and produces a future.",23,[[]]],[8,"WrapFuture","","Helper trait that allows conversion of normal future into…",null,null],[16,"Future","","The future that this type can be converted into.",24,null],[16,"Output","","The item that the future may resolve with.",24,null],[10,"into_actor","","Convert normal future to a ActorFuture",24,[[["a"]]]],[8,"WrapStream","","Helper trait that allows conversion of normal stream into…",null,null],[16,"Stream","","The stream that this type can be converted into.",25,null],[16,"Item","","The item that the future may resolve with.",25,null],[10,"into_actor","","Convert normal stream to a ActorStream",25,[[["a"]]]],[0,"io","actix","",null,null],[3,"Writer","actix::io","A wrapper for `AsyncWrite` types.",null,null],[3,"FramedWrite","","A wrapper for the `AsyncWrite` and `Encoder` types. The…",null,null],[3,"SinkWrite","","A wrapper for the `Sink` type.",null,null],[8,"WriteHandler","","A helper trait for write handling.",null,null],[11,"error","","Called when the writer emits error.",26,[[["self"],["e"]],["running"]]],[11,"finished","","Called when the writer finishes.",26,[[["self"]]]],[11,"new","","",27,[[["c"],["t"]],["self"]]],[11,"close","","Gracefully closes the sink.",27,[[["self"]]]],[11,"closed","","Checks if the sink is closed.",27,[[["self"]],["bool"]]],[11,"set_buffer_capacity","","Sets the write buffer capacity.",27,[[["self"],["usize"]]]],[11,"write","","Sends an item to the sink.",27,[[["self"]]]],[11,"handle","","Returns the `SpawnHandle` for this writer.",27,[[["self"]],["spawnhandle"]]],[11,"new","","",28,[[["u"],["c"],["t"]],["self"]]],[11,"from_buffer","","",28,[[["u"],["bytesmut"],["t"],["c"]],["self"]]],[11,"close","","Gracefully closes the sink.",28,[[["self"]]]],[11,"closed","","Checks if the sink is closed.",28,[[["self"]],["bool"]]],[11,"set_buffer_capacity","","Sets the write buffer capacity.",28,[[["self"],["usize"]]]],[11,"write","","Writes an item to the sink.",28,[[["self"]]]],[11,"handle","","Returns the `SpawnHandle` for this writer.",28,[[["self"]],["spawnhandle"]]],[11,"new","","",29,[[["c"],["s"]],["self"]]],[11,"write","","Sends an item to the sink.",29,[[["self"],["i"]],["result"]]],[11,"close","","Gracefully closes the sink.",29,[[["self"]]]],[11,"closed","","Checks if the sink is closed.",29,[[["self"]],["bool"]]],[11,"handle","","Returns the `SpawnHandle` for this writer.",29,[[["self"]],["spawnhandle"]]],[0,"registry","actix","Actors registry",null,null],[3,"Registry","actix::registry","Actors registry",null,null],[3,"SystemRegistry","","System wide actors registry",null,null],[8,"ArbiterService","","Trait defines arbiter's service.",null,null],[11,"start_service","","Construct and start arbiter service",30,[[],["addr"]]],[11,"service_started","","Method is called during service initialization.",30,[[["self"],["context"]]]],[11,"from_registry","","Get actor's address from arbiter registry",30,[[],["addr"]]],[8,"SystemService","","Trait defines system's service.",null,null],[11,"start_service","","Construct and start system service",31,[[["arbiter"]],["addr"]]],[11,"service_started","","Method is called during service initialization.",31,[[["self"],["context"]]]],[11,"from_registry","","Get actor's address from system registry",31,[[],["addr"]]],[11,"get","","Query registry for specific actor. Returns address of the…",32,[[["self"]],[["arbiterservice"],["actor"],["addr"]]]],[11,"query","","Check if actor is in registry, if so, return its address",32,[[["self"]],[["option",["addr"]],["addr"]]]],[11,"set","","Add new actor to the registry by address, panic if actor…",32,[[["arbiterservice"],["addr"],["actor"]]]],[11,"get","","Return address of the service. If service actor is not…",33,[[["self"]],[["actor"],["systemservice"],["addr"]]]],[11,"query","","Check if actor is in registry, if so, return its address",33,[[["self"]],[["option",["addr"]],["addr"]]]],[11,"set","","Add new actor to the registry by address, panic if actor…",33,[[["addr"],["systemservice"],["actor"]]]],[0,"sync","actix","Sync Actors support",null,null],[3,"SyncArbiter","actix::sync","SyncArbiter provides the resources for a single Sync Actor…",null,null],[3,"SyncContext","","Sync actor execution context. This is used instead of impl…",null,null],[11,"start","","Start a new `SyncArbiter` with specified number of worker…",34,[[["usize"],["f"]],["addr"]]],[0,"utils","actix","",null,null],[3,"Condition","actix::utils","",null,null],[3,"TimerFunc","","An `ActorFuture` that runs a function in the actor's…",null,null],[3,"IntervalFunc","","An `ActorStream` that periodically runs a function in the…",null,null],[11,"wait","","",35,[[["self"]],["receiver"]]],[11,"set","","",35,[[["t"]]]],[11,"new","","Creates a new `TimerFunc` with the given duration.",36,[[["duration"],["f"]],["timerfunc"]]],[11,"new","","Creates a new `IntervalFunc` with the given interval…",37,[[["duration"],["f"]],["intervalfunc"]]],[0,"prelude","actix","The `actix` prelude.",null,null],[3,"Arbiter","actix::prelude","Arbiters provide an asynchronous execution environment for…",null,null],[3,"System","","System is a runtime manager.",null,null],[3,"SystemRunner","","Helper object that runs System's event loop",null,null],[8,"Future","","A future represents an asynchronous computation.",null,null],[16,"Output","","The type of value produced on completion.",38,null],[10,"poll","","Attempt to resolve the future to a final value,…",38,[[["self"],["context"],["pin"]],["poll"]]],[8,"Stream","","A stream of values produced asynchronously.",null,null],[16,"Item","","Values yielded by the stream.",39,null],[10,"poll_next","","Attempt to pull out the next value of this stream,…",39,[[["self"],["context"],["pin"]],[["option"],["poll",["option"]]]]],[11,"size_hint","","Returns the bounds on the remaining length of the stream.",39,[[["self"]]]],[3,"SpawnHandle","","A handle to a spawned future.",null,null],[3,"Addr","","The address of an actor.",null,null],[3,"Recipient","","The `Recipient` type allows to send one specific message…",null,null],[3,"RecipientRequest","","A `Future` which represents an asynchronous message…",null,null],[3,"Request","","A `Future` which represents an asynchronous message…",null,null],[3,"Context","","An actor execution context.",null,null],[3,"ActorResponse","","A helper type for representing different types of message…",null,null],[3,"MessageResult","","A helper type that implements the `MessageResponse` trait.",null,null],[12,"0","","",0,null],[3,"Response","","Helper type for representing different type of message…",null,null],[3,"Supervisor","","Actor supervisor",null,null],[4,"ActorState","","Actor execution state",null,null],[13,"Started","","Actor is started.",1,null],[13,"Running","","Actor is running.",1,null],[13,"Stopping","","Actor is stopping.",1,null],[13,"Stopped","","Actor is stopped.",1,null],[4,"Running","","",null,null],[13,"Stop","","",2,null],[13,"Continue","","",2,null],[4,"MailboxError","","The errors that can occur during the message delivery…",null,null],[13,"Closed","","",3,null],[13,"Timeout","","",3,null],[4,"SendError","","",null,null],[13,"Full","","",40,null],[13,"Closed","","",40,null],[6,"ResponseActFuture","","A specialized actor future for asynchronous message…",null,null],[6,"ResponseFuture","","A specialized future for asynchronous message handling.",null,null],[8,"Actor","","Actors are objects which encapsulate state and behavior.",null,null],[16,"Context","","Actor execution context type",41,null],[11,"started","","Called when an actor gets polled the first time.",41,[[["self"]]]],[11,"stopping","","Called after an actor is in `Actor::Stopping` state.",41,[[["self"]],["running"]]],[11,"stopped","","Called after an actor is stopped.",41,[[["self"]]]],[11,"start","","Start a new asynchronous actor, returning its address.",41,[[],["addr"]]],[11,"start_default","","Construct and start a new asynchronous actor, returning…",41,[[],["addr"]]],[11,"start_in_arbiter","","Start new actor in arbiter's thread.",41,[[["arbiter"],["f"]],["addr"]]],[11,"create","","Start a new asynchronous actor given a `Context`.",41,[[["f"]],["addr"]]],[8,"ActorContext","","Actor execution context.",null,null],[10,"stop","","Immediately stop processing incoming messages and switch…",42,[[["self"]]]],[10,"terminate","","Terminate actor execution unconditionally. This sets the…",42,[[["self"]]]],[10,"state","","Retrieve the current Actor execution state.",42,[[["self"]],["actorstate"]]],[8,"AsyncContext","","Asynchronous execution context.",null,null],[10,"address","","Returns the address of the context.",43,[[["self"]],["addr"]]],[10,"spawn","","Spawns a future into the context.",43,[[["self"],["f"]],["spawnhandle"]]],[10,"wait","","Spawns a future into the context, waiting for it to resolve.",43,[[["self"],["f"]]]],[10,"waiting","","Checks if the context is paused (waiting for future…",43,[[["self"]],["bool"]]],[10,"cancel_future","","Cancels a spawned future.",43,[[["self"],["spawnhandle"]],["bool"]]],[11,"add_stream","","Registers a stream with the context.",43,[[["self"],["s"]],["spawnhandle"]]],[11,"add_message_stream","","Registers a stream with the context, ignoring errors.",43,[[["self"],["s"]]]],[11,"notify","","Sends the message `msg` to self. This bypasses the mailbox…",43,[[["self"],["m"]]]],[11,"notify_later","","Sends the message `msg` to self after a specified period…",43,[[["self"],["m"],["duration"]],["spawnhandle"]]],[11,"run_later","","Executes a closure after a specified period of time.",43,[[["self"],["duration"],["f"]],["spawnhandle"]]],[11,"run_interval","","Spawns a job to execute the given closure periodically, at…",43,[[["self"],["duration"],["f"]],["spawnhandle"]]],[8,"Supervised","","Actors with the ability to restart after failure.",null,null],[11,"restarting","","Called when the supervisor restarts a failed actor.",44,[[["self"]]]],[8,"ContextFutureSpawner","","Helper trait which can spawn a future into the actor's…",null,null],[10,"spawn","","Spawns the future into the given context.",45,[[]]],[10,"wait","","Spawns the future into the given context, waiting for it…",45,[[]]],[8,"Handler","","Describes how to handle messages of a specific type.",null,null],[16,"Result","","The type of value that this handler will return.",46,null],[10,"handle","","This method is called for every message received by this…",46,[[["self"],["m"]]]],[8,"Message","","Represent message that can be handled by an actor.",null,null],[16,"Result","","The type of value that this message will resolved with if…",47,null],[8,"StreamHandler","","Stream handler",null,null],[10,"handle","","Method is called for every message received by this Actor",48,[[["self"],["i"]]]],[11,"started","","Method is called when stream get polled first time.",48,[[["self"]]]],[11,"finished","","Method is called when stream finishes.",48,[[["self"]]]],[11,"add_stream","","This method register stream to an actor context and allows…",48,[[["s"]],["spawnhandle"]]],[0,"dev","actix","The `actix` prelude for library developers.",null,null],[3,"Envelope","actix::dev","",null,null],[3,"RecipientRequest","","A `Future` which represents an asynchronous message…",null,null],[3,"Request","","A `Future` which represents an asynchronous message…",null,null],[3,"ContextFut","","",null,null],[3,"ContextParts","","",null,null],[3,"Mailbox","","",null,null],[0,"channel","","",null,null],[3,"AddressReceiver","actix::dev::channel","The receiving end of a channel which implements the…",null,null],[3,"AddressSender","","The transmission end of a channel which is used to send…",null,null],[5,"channel","","Creates an in-memory channel implementation of the…",null,[[["usize"]]]],[8,"EnvelopeProxy","actix::dev","",null,null],[16,"Actor","","",49,null],[10,"handle","","handle message within new actor and context",49,[[["self"]]]],[8,"ToEnvelope","","Converter trait, packs message into a suitable envelope.",null,null],[10,"pack","","Pack message into suitable envelope",50,[[["option",["sender"]],["m"],["sender"]],["envelope"]]],[8,"AsyncContextParts","","",null,null],[10,"parts","","",51,[[["self"]],["contextparts"]]],[8,"MessageResponse","","A trait which defines message responses.",null,null],[10,"handle","","",52,[[["responsechannel"],["option"]]]],[8,"ResponseChannel","","A trait that defines a message response channel.",null,null],[10,"is_canceled","","",53,[[["self"]],["bool"]]],[10,"send","","",53,[[]]],[6,"ResponseActFuture","actix","A specialized actor future for asynchronous message…",null,null],[6,"ResponseFuture","","A specialized future for asynchronous message handling.",null,null],[8,"Actor","","Actors are objects which encapsulate state and behavior.",null,null],[16,"Context","","Actor execution context type",41,null],[11,"started","actix::prelude","Called when an actor gets polled the first time.",41,[[["self"]]]],[11,"stopping","","Called after an actor is in `Actor::Stopping` state.",41,[[["self"]],["running"]]],[11,"stopped","","Called after an actor is stopped.",41,[[["self"]]]],[11,"start","","Start a new asynchronous actor, returning its address.",41,[[],["addr"]]],[11,"start_default","","Construct and start a new asynchronous actor, returning…",41,[[],["addr"]]],[11,"start_in_arbiter","","Start new actor in arbiter's thread.",41,[[["arbiter"],["f"]],["addr"]]],[11,"create","","Start a new asynchronous actor given a `Context`.",41,[[["f"]],["addr"]]],[8,"ActorContext","actix","Actor execution context.",null,null],[10,"stop","","Immediately stop processing incoming messages and switch…",42,[[["self"]]]],[10,"terminate","","Terminate actor execution unconditionally. This sets the…",42,[[["self"]]]],[10,"state","","Retrieve the current Actor execution state.",42,[[["self"]],["actorstate"]]],[8,"AsyncContext","","Asynchronous execution context.",null,null],[10,"address","","Returns the address of the context.",43,[[["self"]],["addr"]]],[10,"spawn","","Spawns a future into the context.",43,[[["self"],["f"]],["spawnhandle"]]],[10,"wait","","Spawns a future into the context, waiting for it to resolve.",43,[[["self"],["f"]]]],[10,"waiting","","Checks if the context is paused (waiting for future…",43,[[["self"]],["bool"]]],[10,"cancel_future","","Cancels a spawned future.",43,[[["self"],["spawnhandle"]],["bool"]]],[11,"add_stream","actix::prelude","Registers a stream with the context.",43,[[["self"],["s"]],["spawnhandle"]]],[11,"add_message_stream","","Registers a stream with the context, ignoring errors.",43,[[["self"],["s"]]]],[11,"notify","","Sends the message `msg` to self. This bypasses the mailbox…",43,[[["self"],["m"]]]],[11,"notify_later","","Sends the message `msg` to self after a specified period…",43,[[["self"],["m"],["duration"]],["spawnhandle"]]],[11,"run_later","","Executes a closure after a specified period of time.",43,[[["self"],["duration"],["f"]],["spawnhandle"]]],[11,"run_interval","","Spawns a job to execute the given closure periodically, at…",43,[[["self"],["duration"],["f"]],["spawnhandle"]]],[8,"Supervised","actix","Actors with the ability to restart after failure.",null,null],[11,"restarting","actix::prelude","Called when the supervisor restarts a failed actor.",44,[[["self"]]]],[8,"Handler","actix","Describes how to handle messages of a specific type.",null,null],[16,"Result","","The type of value that this handler will return.",46,null],[10,"handle","","This method is called for every message received by this…",46,[[["self"],["m"]]]],[8,"Message","","Represent message that can be handled by an actor.",null,null],[16,"Result","","The type of value that this message will resolved with if…",47,null],[8,"StreamHandler","","Stream handler",null,null],[10,"handle","","Method is called for every message received by this Actor",48,[[["self"],["i"]]]],[11,"started","actix::prelude","Method is called when stream get polled first time.",48,[[["self"]]]],[11,"finished","","Method is called when stream finishes.",48,[[["self"]]]],[11,"add_stream","","This method register stream to an actor context and allows…",48,[[["s"]],["spawnhandle"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,[[["self"],["t"]]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"vzip","","",54,[[],["v"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,[[["self"],["t"]]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"vzip","","",55,[[],["v"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[],["u"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"try_into","","",56,[[],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"type_id","","",56,[[["self"]],["typeid"]]],[11,"vzip","","",56,[[],["v"]]],[11,"from","actix","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"vzip","","",4,[[],["v"]]],[11,"equivalent","","",4,[[["k"],["self"]],["bool"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"vzip","","",9,[[],["v"]]],[11,"equivalent","","",9,[[["k"],["self"]],["bool"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"vzip","","",11,[[],["v"]]],[11,"equivalent","","",11,[[["k"],["self"]],["bool"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"vzip","","",10,[[],["v"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"vzip","","",5,[[],["v"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"vzip","","",7,[[],["v"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"vzip","","",6,[[],["v"]]],[11,"into_actor","","",8,[[["a"]]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"vzip","","",8,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"as_fail","","",3,[[["self"]],["fail"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","actix::dev","",57,[[["t"]],["t"]]],[11,"into","","",57,[[],["u"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"try_into","","",57,[[],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"type_id","","",57,[[["self"]],["typeid"]]],[11,"vzip","","",57,[[],["v"]]],[11,"into_actor","","",58,[[["a"]]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[],["u"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"try_into","","",58,[[],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"type_id","","",58,[[["self"]],["typeid"]]],[11,"vzip","","",58,[[],["v"]]],[11,"from","actix::prelude","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"to_string","","",40,[[["self"]],["string"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"as_fail","","",40,[[["self"]],["fail"]]],[11,"vzip","","",40,[[],["v"]]],[11,"from","actix::dev::channel","",59,[[["t"]],["t"]]],[11,"into","","",59,[[],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,[[["self"],["t"]]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"try_into","","",59,[[],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"type_id","","",59,[[["self"]],["typeid"]]],[11,"vzip","","",59,[[],["v"]]],[11,"equivalent","","",59,[[["k"],["self"]],["bool"]]],[11,"into_actor","","",60,[[["a"]]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[],["u"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"try_into","","",60,[[],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"type_id","","",60,[[["self"]],["typeid"]]],[11,"vzip","","",60,[[],["v"]]],[11,"from","actix::dev","",61,[[["t"]],["t"]]],[11,"into","","",61,[[],["u"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"try_into","","",61,[[],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"type_id","","",61,[[["self"]],["typeid"]]],[11,"vzip","","",61,[[],["v"]]],[11,"into_actor","actix::prelude","",62,[[["a"]]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[],["u"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"try_into","","",62,[[],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"type_id","","",62,[[["self"]],["typeid"]]],[11,"try_poll","","",62,[[["f"],["context"],["pin"]],["poll"]]],[11,"vzip","","",62,[[],["v"]]],[11,"into_actor","","",63,[[["a"]]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[],["u"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"try_into","","",63,[[],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"type_id","","",63,[[["self"]],["typeid"]]],[11,"try_poll","","",63,[[["f"],["context"],["pin"]],["poll"]]],[11,"vzip","","",63,[[],["v"]]],[11,"from","actix::dev","",64,[[["t"]],["t"]]],[11,"into","","",64,[[],["u"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"try_into","","",64,[[],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"type_id","","",64,[[["self"]],["typeid"]]],[11,"vzip","","",64,[[],["v"]]],[11,"from","actix::actors::mocker","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"vzip","","",12,[[],["v"]]],[11,"from","actix::actors::resolver","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"vzip","","",13,[[],["v"]]],[11,"equivalent","","",13,[[["k"],["self"]],["bool"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"vzip","","",14,[[],["v"]]],[11,"equivalent","","",14,[[["k"],["self"]],["bool"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"vzip","","",15,[[],["v"]]],[11,"equivalent","","",15,[[["k"],["self"]],["bool"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"vzip","","",17,[[],["v"]]],[11,"into_future","","",18,[[],["f"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"vzip","","",18,[[],["v"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_string","","",16,[[["self"]],["string"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"vzip","","",16,[[],["v"]]],[11,"into_actor","actix::clock","",65,[[["a"]]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[],["u"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"try_into","","",65,[[],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"type_id","","",65,[[["self"]],["typeid"]]],[11,"vzip","","",65,[[],["v"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,[[["self"],["t"]]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"try_into","","",66,[[],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"type_id","","",66,[[["self"]],["typeid"]]],[11,"borrow","","",66,[[["self"]],["borrowed"]]],[11,"vzip","","",66,[[],["v"]]],[11,"equivalent","","",66,[[["k"],["self"]],["bool"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,[[["self"],["t"]]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"try_into","","",67,[[],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"type_id","","",67,[[["self"]],["typeid"]]],[11,"vzip","","",67,[[],["v"]]],[11,"equivalent","","",67,[[["k"],["self"]],["bool"]]],[11,"into_actor","","",68,[[["a"]]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[],["u"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"try_into","","",68,[[],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"type_id","","",68,[[["self"]],["typeid"]]],[11,"vzip","","",68,[[],["v"]]],[11,"into_actor","actix::fut","",20,[[["a"]]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"vzip","","",20,[[],["v"]]],[11,"into_future","","",69,[[],["f"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[],["u"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"try_into","","",69,[[],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"type_id","","",69,[[["self"]],["typeid"]]],[11,"vzip","","",69,[[],["v"]]],[11,"into_future","","",70,[[],["f"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[],["u"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"try_into","","",70,[[],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"type_id","","",70,[[["self"]],["typeid"]]],[11,"vzip","","",70,[[],["v"]]],[11,"into_future","","",71,[[],["f"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[],["u"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"try_into","","",71,[[],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"type_id","","",71,[[["self"]],["typeid"]]],[11,"vzip","","",71,[[],["v"]]],[11,"into_future","","",72,[[],["f"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[],["u"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"try_into","","",72,[[],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"type_id","","",72,[[["self"]],["typeid"]]],[11,"vzip","","",72,[[],["v"]]],[11,"into_future","","",73,[[],["f"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[],["u"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"try_into","","",73,[[],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"type_id","","",73,[[["self"]],["typeid"]]],[11,"vzip","","",73,[[],["v"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[],["u"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"try_into","","",74,[[],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"type_id","","",74,[[["self"]],["typeid"]]],[11,"vzip","","",74,[[],["v"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[],["u"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"try_into","","",75,[[],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"type_id","","",75,[[["self"]],["typeid"]]],[11,"vzip","","",75,[[],["v"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[],["u"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"try_into","","",76,[[],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"type_id","","",76,[[["self"]],["typeid"]]],[11,"vzip","","",76,[[],["v"]]],[11,"into_future","","",77,[[],["f"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[],["u"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"try_into","","",77,[[],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"type_id","","",77,[[["self"]],["typeid"]]],[11,"vzip","","",77,[[],["v"]]],[11,"into_future","","",78,[[],["f"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[],["u"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"try_into","","",78,[[],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"type_id","","",78,[[["self"]],["typeid"]]],[11,"vzip","","",78,[[],["v"]]],[11,"into_future","","",79,[[],["f"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[],["u"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"try_into","","",79,[[],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"type_id","","",79,[[["self"]],["typeid"]]],[11,"vzip","","",79,[[],["v"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[],["u"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"try_into","","",80,[[],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"type_id","","",80,[[["self"]],["typeid"]]],[11,"vzip","","",80,[[],["v"]]],[11,"into_future","","",19,[[],["f"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"vzip","","",19,[[],["v"]]],[11,"from","actix::io","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"vzip","","",27,[[],["v"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"vzip","","",28,[[],["v"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"vzip","","",29,[[],["v"]]],[11,"from","actix::registry","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,[[["self"],["t"]]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"vzip","","",32,[[],["v"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"vzip","","",33,[[],["v"]]],[11,"into_actor","actix::sync","",34,[[["a"]]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"vzip","","",34,[[],["v"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[],["u"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"try_into","","",81,[[],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"type_id","","",81,[[["self"]],["typeid"]]],[11,"vzip","","",81,[[],["v"]]],[11,"from","actix::utils","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"vzip","","",35,[[],["v"]]],[11,"into_future","","",36,[[],["f"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"vzip","","",36,[[],["v"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"vzip","","",37,[[],["v"]]],[11,"hash","actix::clock","",66,[[["self"],["__h"]]]],[11,"div_assign","","",66,[[["self"],["u32"]]]],[11,"add_assign","","",66,[[["self"],["duration"]]]],[11,"eq","","",66,[[["self"],["duration"]],["bool"]]],[11,"ne","","",66,[[["self"],["duration"]],["bool"]]],[11,"fmt","","",66,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"clone","","",66,[[["self"]],["duration"]]],[11,"sum","","",66,[[["i"]],["duration"]]],[11,"sum","","",66,[[["i"]],["duration"]]],[11,"sub_assign","","",66,[[["self"],["duration"]]]],[11,"cmp","","",66,[[["self"],["duration"]],["ordering"]]],[11,"div","","",66,[[["u32"]],["duration"]]],[11,"mul","","",66,[[["u32"]],["duration"]]],[11,"mul_assign","","",66,[[["self"],["u32"]]]],[11,"sub","","",66,[[["duration"]],["duration"]]],[11,"partial_cmp","","",66,[[["self"],["duration"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",66,[[["self"],["duration"]],["bool"]]],[11,"le","","",66,[[["self"],["duration"]],["bool"]]],[11,"gt","","",66,[[["self"],["duration"]],["bool"]]],[11,"ge","","",66,[[["self"],["duration"]],["bool"]]],[11,"add","","",66,[[["duration"]],["duration"]]],[11,"default","","",66,[[],["duration"]]],[11,"fmt","actix::prelude","",54,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",56,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",55,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"default","","",54,[[],["arbiter"]]],[11,"clone","","",54,[[["self"]],["arbiter"]]],[11,"clone","","",55,[[["self"]],["system"]]],[11,"fmt","actix::clock","",68,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",67,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",65,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"add","","",67,[[["duration"]],["instant"]]],[11,"eq","","",67,[[["instant"],["self"]],["bool"]]],[11,"ne","","",67,[[["instant"],["self"]],["bool"]]],[11,"poll_next","","",68,[[["interval"],["context"],["pin",["interval"]]],[["option",["instant"]],["poll",["option"]]]]],[11,"clone","","",67,[[["self"]],["instant"]]],[11,"sub","","",67,[[["duration"]],["instant"]]],[11,"sub","","",67,[[["instant"]],["duration"]]],[11,"add_assign","","",67,[[["self"],["duration"]]]],[11,"sub_assign","","",67,[[["self"],["duration"]]]],[11,"poll","","",65,[[["context"],["pin",["delay"]],["delay"]],["poll"]]],[11,"partial_cmp","","",67,[[["instant"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",67,[[["instant"],["self"]],["bool"]]],[11,"le","","",67,[[["instant"],["self"]],["bool"]]],[11,"gt","","",67,[[["instant"],["self"]],["bool"]]],[11,"ge","","",67,[[["instant"],["self"]],["bool"]]],[11,"from","","",67,[[["instant"]],["instant"]]],[11,"deserialize","","",66,[[["d"]],[["result",["duration"]],["duration"]]]],[11,"serialize","","",66,[[["s"],["self"]],["result"]]],[11,"started","actix::actors::resolver","",17,[[["self"]]]],[11,"stop","actix","",5,[[["self"]]]],[11,"terminate","","",5,[[["self"]]]],[11,"state","","",5,[[["self"]],["actorstate"]]],[11,"stop","actix::sync","Stop the current Actor. SyncContext will stop the existing…",81,[[["self"]]]],[11,"terminate","","Terminate the current Actor. SyncContext will terminate…",81,[[["self"]]]],[11,"state","","Get the Actor execution state.",81,[[["self"]],["actorstate"]]],[11,"spawn","actix","",5,[[["self"],["f"]],["spawnhandle"]]],[11,"wait","","",5,[[["self"],["f"]]]],[11,"waiting","","",5,[[["self"]],["bool"]]],[11,"cancel_future","","",5,[[["self"],["spawnhandle"]],["bool"]]],[11,"address","","",5,[[["self"]],["addr"]]],[11,"parts","","",5,[[["self"]],["contextparts"]]],[11,"handle","actix::actors::mocker","",12,[[["self"],["m"]]]],[11,"handle","actix::actors::resolver","",17,[[["resolve"],["self"]]]],[11,"handle","","",17,[[["self"],["connect"]]]],[11,"handle","","",17,[[["connectaddr"],["self"]]]],[11,"handle","actix","",0,[[["responsechannel"],["option"]]]],[11,"handle","","",9,[[["responsechannel"],["option"]]]],[11,"handle","","",82,[[["responsechannel"],["option"]]]],[11,"handle","","",83,[[["responsechannel"],["option"]]]],[11,"handle","","",6,[[["responsechannel"],["option"]]]],[11,"handle","","",7,[[["responsechannel"],["option"]]]],[11,"pack","","",5,[[["option",["sender"]],["m"],["sender"]],["envelope"]]],[11,"pack","actix::sync","",81,[[["syncsender"],["m"],["option",["syncsender"]]],["envelope"]]],[11,"handle","actix::dev","",61,[[["self"]]]],[11,"poll","actix::actors::resolver","",18,[[["context"],["resolver"],["self"],["pin"],["context"]],["poll"]]],[11,"poll","actix::fut","",19,[[["context"],["self"],["pin"]],["poll"]]],[11,"poll","","",69,[[["context"],["self"],["pin"]],["poll"]]],[11,"poll","","",70,[[["self"],["pin"],["context"]],["poll"]]],[11,"poll","","",71,[[["self"],["pin"],["context"]],["poll"]]],[11,"poll","","",72,[[["context"],["self"],["pin"]],["poll"]]],[11,"poll","","",73,[[["context"],["self"],["pin"]],["poll"]]],[11,"poll","","",77,[[["context"],["self"],["pin"]],["poll"]]],[11,"poll","","",78,[[["context"],["self"],["pin"]],["poll"]]],[11,"poll","","",79,[[["self"],["pin"],["context"]],["poll"]]],[11,"poll","actix::utils","",36,[[["context"],["self"],["pin"]],["poll"]]],[11,"poll_next","actix::fut","",74,[[["context"],["self"],["pin"]],[["poll",["option"]],["option"]]]],[11,"poll_next","","",75,[[["context"],["self"],["pin"]],[["poll",["option"]],["option"]]]],[11,"poll_next","","",76,[[["context"],["self"],["pin"]],[["option",["result"]],["poll",["option"]]]]],[11,"poll_next","","",80,[[["context"],["self"],["pin"]],[["option"],["poll",["option"]]]]],[11,"poll_next","actix::utils","",37,[[["context"],["self"],["pin"]],[["option"],["poll",["option"]]]]],[11,"drop","actix::dev","",58,[[["self"]]]],[11,"drop","actix::dev::channel","",59,[[["self"]]]],[11,"drop","","",60,[[["self"]]]],[11,"drop","actix::io","",28,[[["self"]]]],[11,"from","actix::fut","",71,[[["result"]],["self"]]],[11,"into","actix","",9,[[],["recipient"]]],[11,"clone","","",1,[[["self"]],["actorstate"]]],[11,"clone","","",2,[[["self"]],["running"]]],[11,"clone","","",4,[[["self"]],["spawnhandle"]]],[11,"clone","actix::dev::channel","",59,[[["self"]],["addresssender"]]],[11,"clone","actix","",9,[[["self"]],["addr"]]],[11,"clone","","",11,[[["self"]],["recipient"]]],[11,"clone","actix::registry","",32,[[["self"]],["registry"]]],[11,"default","actix","",4,[[],["spawnhandle"]]],[11,"default","actix::dev","",64,[[],["self"]]],[11,"default","actix::actors::mocker","",12,[[],["self"]]],[11,"default","actix::actors::resolver","",17,[[],["resolver"]]],[11,"default","actix::utils","",35,[[],["self"]]],[11,"eq","actix","",1,[[["actorstate"],["self"]],["bool"]]],[11,"eq","","",2,[[["running"],["self"]],["bool"]]],[11,"eq","","",4,[[["spawnhandle"],["self"]],["bool"]]],[11,"ne","","",4,[[["spawnhandle"],["self"]],["bool"]]],[11,"eq","actix::dev::channel","",59,[[["self"]],["bool"]]],[11,"eq","actix","",9,[[["self"]],["bool"]]],[11,"eq","","",11,[[["self"]],["bool"]]],[11,"eq","actix::actors::resolver","",13,[[["resolve"],["self"]],["bool"]]],[11,"ne","","",13,[[["resolve"],["self"]],["bool"]]],[11,"eq","","",14,[[["connect"],["self"]],["bool"]]],[11,"ne","","",14,[[["connect"],["self"]],["bool"]]],[11,"eq","","",15,[[["self"],["connectaddr"]],["bool"]]],[11,"ne","","",15,[[["self"],["connectaddr"]],["bool"]]],[11,"fmt","actix","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","actix::dev","",57,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",58,[[["formatter"],["self"]],["result"]]],[11,"fmt","actix","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix::dev::channel","",59,[[["formatter"],["self"]],["result"]]],[11,"fmt","actix::prelude","",40,[[["formatter"],["self"]],["result"]]],[11,"fmt","actix","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","actix::dev","",64,[[["formatter"],["self"]],["result"]]],[11,"fmt","actix::actors::resolver","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix::fut","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix::registry","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix::prelude","",40,[[["formatter"],["self"]],["result"]]],[11,"fmt","actix::actors::resolver","",16,[[["self"],["formatter"]],["result"]]],[11,"hash","actix","",4,[[["self"],["__h"]]]],[11,"hash","actix::dev::channel","",59,[[["self"],["h"]]]],[11,"hash","actix","",9,[[["self"],["h"]]]],[11,"hash","","",11,[[["self"],["h"]]]],[11,"poll","actix::prelude","",62,[[["self"],["pin"],["context"]],["poll"]]],[11,"poll","","",63,[[["self"],["pin"],["context"]],["poll"]]],[11,"poll","actix::fut","",20,[[["context"],["self"],["pin"]],["poll"]]],[11,"poll_next","actix::dev::channel","",60,[[["self"],["pin"],["context"]],[["poll",["option"]],["option"]]]],[11,"current","actix::prelude","Returns the current thread's arbiter's address. If no…",54,[[],["arbiter"]]],[11,"stop","","Stop arbiter from continuing it's event loop.",54,[[["self"]]]],[11,"new","","Spawn new thread and run event loop in spawned thread.…",54,[[],["arbiter"]]],[11,"spawn","","Spawn a future on the current thread. This does not create…",54,[[["f"]]]],[11,"spawn_fn","","Executes a future on the current thread. This does not…",54,[[["f"]]]],[11,"send","","Send a future to the Arbiter's thread, and spawn it.",54,[[["self"],["f"]]]],[11,"exec_fn","","Send a function to the Arbiter's thread, and execute it.…",54,[[["self"],["f"]]]],[11,"exec","","Send a function to the Arbiter's thread. This function…",54,[[["self"],["f"]]]],[11,"set_item","","Set item to arbiter storage",54,[[["t"]]]],[11,"contains_item","","Check if arbiter storage contains item",54,[[],["bool"]]],[11,"get_item","","Get a reference to a type previously inserted on this…",54,[[["f"]],["r"]]],[11,"get_mut_item","","Get a mutable reference to a type previously inserted on…",54,[[["f"]],["r"]]],[11,"join","","Wait for the event loop to stop by joining the underlying…",54,[[["self"]],[["result",["box"]],["box",["any"]]]]],[11,"builder","","Build a new system with a customized tokio runtime.",55,[[],["builder"]]],[11,"new","","Create new system.",55,[[["t"]],["systemrunner"]]],[11,"run_in_tokio","","Create new system using provided tokio Handle.",55,[[["localset"],["t"]]]],[11,"current","","Get current running system.",55,[[],["system"]]],[11,"with_current","","Execute function with system reference.",55,[[["f"]],["r"]]],[11,"id","","System id",55,[[["self"]],["usize"]]],[11,"stop","","Stop the system",55,[[["self"]]]],[11,"stop_with_code","","Stop the system with a particular exit code.",55,[[["self"],["i32"]]]],[11,"stop_on_panic","","Return status of 'stop_on_panic' option which controls…",55,[[["self"]],["bool"]]],[11,"arbiter","","System arbiter",55,[[["self"]],["arbiter"]]],[11,"run","","This function will start tokio runtime and will finish…",55,[[["f"]],[["result",["error"]],["error"]]]],[11,"run","","This function will start event loop and will finish once…",56,[[],[["result",["error"]],["error"]]]],[11,"block_on","","Execute a future and wait for result.",56,[[["self"],["f"]],["o"]]],[11,"started","","Called when an actor gets polled the first time.",41,[[["self"]]]],[11,"stopping","","Called after an actor is in `Actor::Stopping` state.",41,[[["self"]],["running"]]],[11,"stopped","","Called after an actor is stopped.",41,[[["self"]]]],[11,"start","","Start a new asynchronous actor, returning its address.",41,[[],["addr"]]],[11,"start_default","","Construct and start a new asynchronous actor, returning…",41,[[],["addr"]]],[11,"start_in_arbiter","","Start new actor in arbiter's thread.",41,[[["arbiter"],["f"]],["addr"]]],[11,"create","","Start a new asynchronous actor given a `Context`.",41,[[["f"]],["addr"]]],[11,"restarting","","Called when the supervisor restarts a failed actor.",44,[[["self"]]]],[11,"add_stream","","Registers a stream with the context.",43,[[["self"],["s"]],["spawnhandle"]]],[11,"add_message_stream","","Registers a stream with the context, ignoring errors.",43,[[["self"],["s"]]]],[11,"notify","","Sends the message `msg` to self. This bypasses the mailbox…",43,[[["self"],["m"]]]],[11,"notify_later","","Sends the message `msg` to self after a specified period…",43,[[["self"],["m"],["duration"]],["spawnhandle"]]],[11,"run_later","","Executes a closure after a specified period of time.",43,[[["self"],["duration"],["f"]],["spawnhandle"]]],[11,"run_interval","","Spawns a job to execute the given closure periodically, at…",43,[[["self"],["duration"],["f"]],["spawnhandle"]]],[11,"new","actix::dev","Create new ContextParts instance",57,[[["addresssenderproducer"]],["self"]]],[11,"stop","","Initiate stop process for actor execution",57,[[["self"]]]],[11,"terminate","","Terminate actor execution",57,[[["self"]]]],[11,"state","","Actor execution state",57,[[["self"]],["actorstate"]]],[11,"waiting","","Is context waiting for future completion",57,[[["self"]],["bool"]]],[11,"curr_handle","","Handle of the running future",57,[[["self"]],["spawnhandle"]]],[11,"spawn","","Spawn new future to this context.",57,[[["self"],["f"]],["spawnhandle"]]],[11,"wait","","Spawn new future to this context and wait future completion.",57,[[["self"],["f"]]]],[11,"cancel_future","","Cancel previously scheduled future.",57,[[["self"],["spawnhandle"]],["bool"]]],[11,"capacity","","",57,[[["self"]],["usize"]]],[11,"set_mailbox_capacity","","",57,[[["self"],["usize"]]]],[11,"address","","",57,[[["self"]],["addr"]]],[11,"started","","",57,[[["self"]],["bool"]]],[11,"connected","","Are any senders connected",57,[[["self"]],["bool"]]],[11,"new","","",58,[[["c"],["a"],["mailbox"]],["self"]]],[11,"ctx","","",58,[[["self"]],["c"]]],[11,"address","","",58,[[["self"]],["addr"]]],[11,"alive","","",58,[[["self"]],["bool"]]],[11,"started","actix::prelude","Method is called when stream get polled first time.",48,[[["self"]]]],[11,"finished","","Method is called when stream finishes.",48,[[["self"]]]],[11,"add_stream","","This method register stream to an actor context and allows…",48,[[["s"]],["spawnhandle"]]],[11,"connected","actix::dev::channel","Is the channel still open",59,[[["self"]],["bool"]]],[11,"send","","Attempts to send a message on this `Sender<A>` with…",59,[[["m"],["self"]],[["receiver"],["senderror"],["result",["receiver","senderror"]]]]],[11,"try_send","","Attempts to send a message on this `Sender<A>` without…",59,[[["m"],["self"],["bool"]],[["senderror"],["result",["senderror"]]]]],[11,"do_send","","Send a message on this `Sender<A>` without blocking.",59,[[["m"],["self"]],[["senderror"],["result",["senderror"]]]]],[11,"downgrade","","Downgrade to `WeakAddressSender` which can later be upgraded",59,[[["self"]],["weakaddresssender"]]],[11,"connected","","Returns whether any senders are still connected.",60,[[["self"]],["bool"]]],[11,"capacity","","Returns the channel capacity.",60,[[["self"]],["usize"]]],[11,"set_capacity","","Sets the channel capacity.",60,[[["self"],["usize"]]]],[11,"sender","","Returns the sender side of the channel.",60,[[["self"]],["addresssender"]]],[11,"sender_producer","","Creates the sender producer.",60,[[["self"]],["addresssenderproducer"]]],[11,"new","actix::dev","",61,[[["option",["sender"]],["m"],["sender"]],["self"]]],[11,"with_proxy","","",61,[[["envelopeproxy"],["box",["envelopeproxy"]]],["self"]]],[11,"timeout","actix::prelude","Set message delivery timeout",62,[[["duration"]],["self"]]],[11,"new","","",63,[[["option",["receiver"]],["option"],["receiver"]],["recipientrequest"]]],[11,"timeout","","Set message delivery timeout",63,[[["duration"]],["self"]]],[11,"into_inner","","",40,[[],["t"]]],[11,"new","actix::dev","",64,[[["addressreceiver"]],["self"]]],[11,"capacity","","",64,[[["self"]],["usize"]]],[11,"set_capacity","","",64,[[["self"],["usize"]]]],[11,"connected","","",64,[[["self"]],["bool"]]],[11,"address","","",64,[[["self"]],["addr"]]],[11,"sender_producer","","",64,[[["self"]],["addresssenderproducer"]]],[11,"poll","","",64,[[["a"],["self"],["context"]]]],[11,"deadline","actix::clock","Returns the instant at which the future will complete.",65,[[["self"]],["instant"]]],[11,"is_elapsed","","Returns true if the `Delay` has elapsed",65,[[["self"]],["bool"]]],[11,"reset","","Reset the `Delay` instance to a new deadline.",65,[[["self"],["instant"]]]],[18,"SECOND","","The duration of one second.",66,null],[18,"MILLISECOND","","The duration of one millisecond.",66,null],[18,"MICROSECOND","","The duration of one microsecond.",66,null],[18,"NANOSECOND","","The duration of one nanosecond.",66,null],[11,"new","","Creates a new `Duration` from the specified number of…",66,[[["u32"],["u64"]],["duration"]]],[11,"from_secs","","Creates a new `Duration` from the specified number of…",66,[[["u64"]],["duration"]]],[11,"from_millis","","Creates a new `Duration` from the specified number of…",66,[[["u64"]],["duration"]]],[11,"from_micros","","Creates a new `Duration` from the specified number of…",66,[[["u64"]],["duration"]]],[11,"from_nanos","","Creates a new `Duration` from the specified number of…",66,[[["u64"]],["duration"]]],[11,"as_secs","","Returns the number of whole seconds contained by this…",66,[[["self"]],["u64"]]],[11,"subsec_millis","","Returns the fractional part of this `Duration`, in whole…",66,[[["self"]],["u32"]]],[11,"subsec_micros","","Returns the fractional part of this `Duration`, in whole…",66,[[["self"]],["u32"]]],[11,"subsec_nanos","","Returns the fractional part of this `Duration`, in…",66,[[["self"]],["u32"]]],[11,"as_millis","","Returns the total number of whole milliseconds contained…",66,[[["self"]],["u128"]]],[11,"as_micros","","Returns the total number of whole microseconds contained…",66,[[["self"]],["u128"]]],[11,"as_nanos","","Returns the total number of nanoseconds contained by this…",66,[[["self"]],["u128"]]],[11,"checked_add","","Checked `Duration` addition. Computes `self + other`,…",66,[[["duration"]],[["option",["duration"]],["duration"]]]],[11,"checked_sub","","Checked `Duration` subtraction. Computes `self - other`,…",66,[[["duration"]],[["option",["duration"]],["duration"]]]],[11,"checked_mul","","Checked `Duration` multiplication. Computes `self *…",66,[[["u32"]],[["option",["duration"]],["duration"]]]],[11,"checked_div","","Checked `Duration` division. Computes `self / other`,…",66,[[["u32"]],[["option",["duration"]],["duration"]]]],[11,"as_secs_f64","","Returns the number of seconds contained by this `Duration`…",66,[[["self"]],["f64"]]],[11,"as_secs_f32","","Returns the number of seconds contained by this `Duration`…",66,[[["self"]],["f32"]]],[11,"from_secs_f64","","Creates a new `Duration` from the specified number of…",66,[[["f64"]],["duration"]]],[11,"from_secs_f32","","Creates a new `Duration` from the specified number of…",66,[[["f32"]],["duration"]]],[11,"mul_f64","","Multiplies `Duration` by `f64`.",66,[[["f64"]],["duration"]]],[11,"mul_f32","","Multiplies `Duration` by `f32`.",66,[[["f32"]],["duration"]]],[11,"div_f64","","Divide `Duration` by `f64`.",66,[[["f64"]],["duration"]]],[11,"div_f32","","Divide `Duration` by `f32`.",66,[[["f32"]],["duration"]]],[11,"div_duration_f64","","Divide `Duration` by `Duration` and return `f64`.",66,[[["duration"]],["f64"]]],[11,"div_duration_f32","","Divide `Duration` by `Duration` and return `f32`.",66,[[["duration"]],["f32"]]],[11,"now","","Returns an instant corresponding to \"now\".",67,[[],["instant"]]],[11,"from_std","","Create a `tokio::time::Instant` from a `std::time::Instant`.",67,[[["instant"]],["instant"]]],[11,"into_std","","Convert the value into a `std::time::Instant`.",67,[[],["instant"]]],[11,"duration_since","","Returns the amount of time elapsed from another instant to…",67,[[["self"],["instant"]],["duration"]]],[11,"checked_duration_since","","Returns the amount of time elapsed from another instant to…",67,[[["self"],["instant"]],[["option",["duration"]],["duration"]]]],[11,"saturating_duration_since","","Returns the amount of time elapsed from another instant to…",67,[[["self"],["instant"]],["duration"]]],[11,"elapsed","","Returns the amount of time elapsed since this instant was…",67,[[["self"]],["duration"]]],[11,"checked_add","","Returns `Some(t)` where `t` is the time `self + duration`…",67,[[["self"],["duration"]],[["option",["instant"]],["instant"]]]],[11,"checked_sub","","Returns `Some(t)` where `t` is the time `self - duration`…",67,[[["self"],["duration"]],[["option",["instant"]],["instant"]]]],[11,"tick","","Completes when the next instant in the interval has been…",68,[[["self"]]]]],"p":[[3,"MessageResult"],[4,"ActorState"],[4,"Running"],[4,"MailboxError"],[3,"SpawnHandle"],[3,"Context"],[3,"Response"],[3,"ActorResponse"],[3,"Supervisor"],[3,"Addr"],[3,"WeakAddr"],[3,"Recipient"],[3,"Mocker"],[3,"Resolve"],[3,"Connect"],[3,"ConnectAddr"],[4,"ResolverError"],[3,"Resolver"],[3,"TcpConnector"],[4,"Either"],[3,"Finish"],[8,"ActorFuture"],[8,"ActorStream"],[8,"IntoActorFuture"],[8,"WrapFuture"],[8,"WrapStream"],[8,"WriteHandler"],[3,"Writer"],[3,"FramedWrite"],[3,"SinkWrite"],[8,"ArbiterService"],[8,"SystemService"],[3,"Registry"],[3,"SystemRegistry"],[3,"SyncArbiter"],[3,"Condition"],[3,"TimerFunc"],[3,"IntervalFunc"],[8,"Future"],[8,"Stream"],[4,"SendError"],[8,"Actor"],[8,"ActorContext"],[8,"AsyncContext"],[8,"Supervised"],[8,"ContextFutureSpawner"],[8,"Handler"],[8,"Message"],[8,"StreamHandler"],[8,"EnvelopeProxy"],[8,"ToEnvelope"],[8,"AsyncContextParts"],[8,"MessageResponse"],[8,"ResponseChannel"],[3,"Arbiter"],[3,"System"],[3,"SystemRunner"],[3,"ContextParts"],[3,"ContextFut"],[3,"AddressSender"],[3,"AddressReceiver"],[3,"Envelope"],[3,"Request"],[3,"RecipientRequest"],[3,"Mailbox"],[3,"Delay"],[3,"Duration"],[3,"Instant"],[3,"Interval"],[3,"Map"],[3,"Ready"],[3,"FutureResult"],[3,"StreamFinish"],[3,"StreamFold"],[3,"StreamMap"],[3,"StreamThen"],[3,"StreamTimeout"],[3,"Then"],[3,"Timeout"],[3,"FutureWrap"],[3,"StreamWrap"],[3,"SyncContext"],[6,"ResponseActFuture"],[6,"ResponseFuture"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);